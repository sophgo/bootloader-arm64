#!/bin/bash

# restoring default netplan configuration
restore_netplan() {
	NETPLAN_FILE="/etc/netplan/01-netcfg.yaml"
	DEFAULT_FILE="/etc/netplan/01-netcfg.yaml.bak"

    if [ -f "$DEFAULT_FILE" ]; then
        echo "Restoring default netplan configuration..."
        sudo cp "$DEFAULT_FILE" "$NETPLAN_FILE"
		sudo sync
        sudo netplan apply
        echo "Default netplan configuration restored."
    else
        echo "No found. Cannot restore default configuration."
    fi
}

if [ $1 == "default" ]; then
	restore_netplan
	exit 0
else
	if [ $# -lt 4  ] ; then
		echo "bm_set_ip net_device ip netmask gateway dns to to_netmask via"
		echo "eg: bm_set_ip eth0 192.168.1.100 255.255.255.0 192.168.1.1 192.168.1.1 192.168.2.0 255.255.255.0 192.168.1.1"
		echo "gateway and dns allow empty. pls follow below example"
		echo "eg: bm_set_ip eth0 192.168.1.100 255.255.255.0 '' '' "
		ech0 "Restoring default netplan configuration"
		echo "eg: bm_set_ip default "
		echo " to: destination network, via: next hop address"
		exit -1
	fi
fi


device=$1
ip=$2
netmask=$3
if [ $netmask = "0.0.0.0" ]; then
        exit -1
fi
gateway=$4
dns=$5

to_net=$6
to_netmask=$7
via=$8

# Function: Convert netmask to CIDR format
netmask_to_cidr() {
    local netmask=$1
    local shortMask=0
    local maskArray=()

    # Split netmask into an array
    local mask1=$(echo $netmask | awk -F . '{printf("%d\n", $1)}')
    local mask2=$(echo $netmask | awk -F . '{printf("%d\n", $2)}')
    local mask3=$(echo $netmask | awk -F . '{printf("%d\n", $3)}')
    local mask4=$(echo $netmask | awk -F . '{printf("%d\n", $4)}')
    maskArray=($mask1 $mask2 $mask3 $mask4)

    # Calculate CIDR prefix length
    for (( i=0; i<${#maskArray[@]}; i++ )); do
        if [ "${maskArray[$i]}" = "255" ]; then
            shortMask=$((shortMask + 8))
        else
            local lastBin=$(echo "obase=2; ${maskArray[$i]}" | bc)
            local last=$(echo $lastBin | grep -o '1' | wc -l)
            shortMask=$((shortMask + last))
            break
        fi
    done

    echo $shortMask
}

shortMask=$(netmask_to_cidr $netmask)
to_shortMask=$(netmask_to_cidr $to_netmask)

is_ubuntu=$(cat /etc/os-release | grep Ubuntu |wc -l)
is_kylinos=$(cat /etc/os-release | grep kylinos |wc -l)

if [ $is_ubuntu -gt 1 ];then
	echo "ubuntu"
	device_path="/etc/netplan/01-netcfg.yaml"
	#device_path="01-netcfg.yaml"
	eth_num=$(grep -inr "$device:" $device_path | awk -F : '{print $1}')
	num=$(($eth_num+5))
	if [ ! $eth_num = "" ];then
		for ((i=1; i<=6; i++))
		do
			num=$(($eth_num+$i))
			c_str=$(sed -n "${num}p" $device_path | awk -F : '{print$1}')
			echo $c_str
			if [[ $c_str =~ "dhcp" ]] || [[ $c_str =~ "addresses" ]] || [[ $c_str =~ "gateway4" ]] || [[ $c_str =~ "nameservers" ]] || [[ $c_str =~ "optional" ]];then
				d_str="${num}d"
			elif [[ $c_str =~ "routes" ]]; then
				d_str="$(($num+2))d"
				i+=2;
			else
				break;
			fi
		done
		echo "$eth_num,$d_str"
		sudo sed -i "$eth_num,$d_str" $device_path
		sudo sync
	fi
	echo "add network config"
	echo "                ${device}:" | sudo tee -a $device_path
	echo "                        dhcp4: no" | sudo tee -a  $device_path
	echo "                        addresses: [${ip}/${shortMask}]" | sudo tee -a  $device_path
        if [ "$gateway" != "" ] && [[ "$device" == "enp3s0" || "$device" == "enp4s0" || "$device" == "eth0" ]];then
                echo "                        gateway4: $gateway" | sudo tee -a  $device_path
        fi
	echo "                        nameservers:" | sudo tee -a  $device_path
	echo "                                addresses: [${dns}]" | sudo tee -a  $device_path
		if [ "$to_net" != "" ] && [ "$to_netmask" != "" ] && [ "$via" != "" ]; then
                echo "                        routes:" | sudo tee -a  $device_path
				echo "                                - to: ${to_net}/${to_shortMask}" | sudo tee -a  $device_path
				echo "                                  via: ${via}" | sudo tee -a  $device_path
        fi
	echo "                        optional: yes" | sudo tee -a  $device_path
	if [ "$dns" != "" ];then
	        sudo sed -i "s/^nameserver .*/nameserver $dns/" /etc/resolv.conf
	fi
	sudo sync
	sudo netplan apply

else
	if [ $is_kylinos -gt 1 ];then
		exist=$(nmcli con | grep "static-${device}" | wc -l)
		if [ "$exist" -gt 0 ]; then
			nmcli con delete "static-${device}"
		fi
		nmcli con add type ethernet con-name "static-${device}" ifname ${device} ipv4.method manual ipv4.addresses ${ip}/${shortMask}
		if [ "$gateway" != "" ] && [ "$device" == "enp3s0" ];then
			nmcli con modify "static-${device}" ipv4.gateway $gateway
		fi
		if [ "$dns" != "" ];then
			nmcli con modify "static-${device}" ipv4.dns $dns
		fi
		nmcli connection modify "static-${device}" connection.autoconnect yes
		nmcli con up "static-${device}"
	else
		echo "debian"
		device_path="/etc/network/interfaces.d/$device"

		echo  "auto $device" | sudo tee $device_path
		echo  "iface $device inet static" |sudo tee -a $device_path
		echo  "        address $ip" |sudo tee -a $device_path
		echo  "        netmask $netmask" |sudo tee -a $device_path
		if [ $device == "eth0"  ];then
			echo  "        gateway $gateway" |sudo tee -a $device_path
		fi
		echo "        dns-nameservers $dns" |sudo tee -a $device_path

		sudo ip addr flush dev $device
		sudo service networking restart
	fi
fi
